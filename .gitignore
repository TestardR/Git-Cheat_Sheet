# Git cheat sheet

# Basic commands
git init <optional-folder>
git status

git add <file>
git commit -m "<message>"

git clone <file-path>

# Recursive Add
git add .

# if your file is tracked you can use the following
git ls-files
git commit -am "<message>"

# Unstage changes
get reset HEAD <file>

# Discard changes
git checkout -- <file>

# Rename and move files
# Rename
git mv <current-file> <new-file>
# Move file
git mv <file> <folder>
# if you use the bash command, you then have recursively and looking for name changes add
git add -A 
# update the index (working tree), add no files
git add -u

# Deleting files
rm <file>
# if tracked
git ls-files
git rm <file>

# to undelete a file
git rm <file>   
git checkout -- <file>

# what if you deleted not using git
rm <file>
# to stage your deletation
git add -A 

# history
git log
git log --abbrev-commit
git log --oneline --graph --decorate
git log <commit>...<commit> 
git log --since="3 days ago"
git log -- <file>
git show <commit>

# alias
# git hist
git config --global alias.hist "log --all --graph --decorate --oneline"
aliases are in ~/gitconfig

# exclude unwanted files
.gitignore
# specific file
file.txt
# file pattern
*.txt
# folder
my-folder/

# Comparing Working Directory and the Staging Area 
git diff
# To visually see changes
git difftool

# Comparing Working Directory and Git Repository (Last Commit)
git diff HEAD
git difftool HEAD

# Comparing between the Staging Area and the Git Repository (Last Commit)
git diff --staged HEAD
git difftool --staged HEAD

# Limiting Comparsons to one File (or path)
git diff -- <file>

# Comparing Between Commits
git diff <commit> HEAD
git diff <commit> <commit>
git diff HEAD HEAD^1

# Comparing Between Local and Remote Master Branches
# local master and master branch on github
git diff master origin/master

# Branching basics
# list branches
git branch -a
# create branch
git branch <name>
# switch branch
git checkout <name>
# rename a branch
git branch -m <old-name> <new-name>
# delete a branch 
git branch -d <name>

# Merges 
# create a branch and switch to it
git checkout -b <name>
# before merging compare branches
git diff master <branch-name>
git difftool master title-chage
# Going back to the main branch and merge
# Fast Forward Merge
git checkout master
git merge <branch-name>
# Disable Fast Forward Merge
git merge <branch-name> --no-ff
# Check your work
git log --oneline --graph --decorate
# Automatic Merge
git merge <branch-name> -m "<your-message>"

# Rebasing
# Simple case
git rebase master