# Git cheat sheet

# Basic commands
git init <optional-folder>
git status

git add <file>
git commit -m "<message>"

git clone <file-path>

# Recursive Add
git add .

# if your file is tracked you can use the following
git ls-files
git commit -am "<message>"

# Unstage changes
get reset HEAD <file>

# Discard changes
git checkout -- <file>

# Rename and move files
# Rename
git mv <current-file> <new-file>
# Move file
git mv <file> <folder>
# if you use the bash command, you then have recursively and looking for name changes add
git add -A 
# update the index (working tree), add no files
git add -u

# Deleting files
rm <file>
# if tracked
git ls-files
git rm <file>

# to undelete a file
git rm <file>   
git checkout -- <file>

# what if you deleted not using git
rm <file>
# to stage your deletation
git add -A 

# history
git log
git log --abbrev-commit
git log --oneline --graph --decorate
git log <commit>...<commit> 
git log --since="3 days ago"
git log -- <file>
git show <commit>

# alias
# git hist
git config --global alias.hist "log --all --graph --decorate --oneline"
aliases are in ~/gitconfig

# exclude unwanted files
.gitignore
# specific file
file.txt
# file pattern
*.txt
# folder
my-folder/

# Comparing Working Directory and the Staging Area 
git diff
# To visually see changes
git difftool

# Comparing Working Directory and Git Repository (Last Commit)
git diff HEAD
git difftool HEAD

# Comparing between the Staging Area and the Git Repository (Last Commit)
git diff --staged HEAD
git difftool --staged HEAD

# Comparing between a file on a remote tag with a local fil
# the refs folder lies inside .git/
git diff refs/rtags/matrix-org/v1.7.4 refs/heads/master --  ./src/components/structures/auth/Login.js
git diff <remote> <local> -- <file-path>

# Limiting Comparsons to one File (or path)
git diff -- <file>

# Comparing Between Commits
git diff <commit> HEAD
git diff <commit> <commit>
git diff HEAD HEAD^1

# Comparing Between Local and Remote Master Branches
# local master and master branch on github
git diff master origin/master

# Branching basics
# list branches
git branch -a
# create branch
git branch <name>
# switch branch
git checkout <name>
# rename a branch
git branch -m <old-name> <new-name>
# delete a branch 
git branch -d <name>

# Merges 
# create a branch and switch to it
git checkout -b <name>
# before merging compare branches
git diff master <branch-name>
git difftool master title-chage
# Going back to the main branch and merge
# Fast Forward Merge
git checkout master
git merge <branch-name>
# Disable Fast Forward Merge
git merge <branch-name> --no-ff
# Check your work
git log --oneline --graph --decorate
# Automatic Merge
git merge <branch-name> -m "<your-message>"

# Rebasing
# Simple case on the advanced branch from a divergent master
git rebase master

# Pull with rebase
# git pull = git fetch + git merge
git fetch
git pull --rebase origin master


# Stashing
# only work on tracked files
git stash 
# same as save by default
git stash save
# commit changes in btwn
git commit -am "<msg>"
# to apply work
git stash apply
# delete the stash
git stash drop


# to stash untracked files
git stash -u

# git stash apply + git stash drop
git stash pop

# Managing Multiples stashes
git stash save "<msg>"
# show a specific stash
git stash show stash@{<num>}
# apply a specific stash
git stash apply stash@{<num>}
# drop a specific stash
git stash drop stash@{<num>}


# see all stashes
git stash list
# drop all stashes
git stash clear

# Stashing into a Branch
# create a branch, switch into a branch, apply the stash, and drop the stash
git stash branch <name>


# Tagging
# Simple tag / Lightwieght Tags
git tag <tag>
# See tags
git tag --list
# See a tag
git show <tag>
# Delete a tag
git tag --delete <tag>

# Annotated Tag
git tag -a <version>
# git tag -a v-1.0
git tag <version> -m <commit-message>
# comparing
git diff <tag> <tag>
git difftool <tag> <tag>
# tagging a specific commit
git tag -a <tag> <commit-id>
# update tag
git tag -a <tag> -f <commit-id>
# push one tag
git push origin <tag>
# sync tags with githug
git push origin master --tags
# delete the content of a pushed tag
git push origin :<tag>

# .git/config example
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = git@bitbucket.org:opensense/matrix-react-sdk.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
[branch "release/space-public"]
	remote = origin
	merge = refs/heads/release/space-public
[branch "upgrade/2.0"]
	remote = origin
	merge = refs/heads/upgrade/2.0.0
[remote "matrix-org"]
	url = https://github.com/matrix-org/matrix-react-sdk.git
	fetch = +refs/heads/*:refs/remotes/matrix-org/*
	fetch = +refs/tags/*:refs/rtags/matrix-org/*
	tagopt = --no-tags
	pushurl = no_push
